type Query {
  "get all courses"
  getAllCourses: [Course]
  "get course by Id"
  getCourseById(id: ID!): Course

  "get people"
  getPeople: [Person]
  "get student by Id"
  getStudentById(id: ID!): Student
}

type Course {
  _id: ID!
  title: String!

  nivel: Nivel
  topic: String
  teacher: String
  description: String

  people: [Student]
}

input CourseInput {
  title: String
  description: String

  nivel: Nivel
  topic: String
  teacher: String
}

interface Person {
 _id: ID!
  name: String!
  email: String!
}

type Student implements Person {
  _id: ID!
  name: String!
  email: String!
  avatar: String
}

type Monitor implements Person {
  _id: ID!
  name: String!
  email: String!
  phone: String
}

input PersonInput {
  name: String
  email: String
  phone: String
  avatar: String
}

enum Nivel {
  facil
  medio
  dificil
}

type Mutation {
  "Create a course"
  createCourse(course: CourseInput!): Course
  createManyCourse(courses: [CourseInput]): [Course] 
  "put course by Id"
  putCourseById(id: ID!, course: CourseInput!): Course
  "delete Course by Id"
  deleteCourseById(id: ID!): String
  "delete all courses"
  deleteAllCourses: String

  "Create a student"
  createPerson(input: PersonInput!): Person
  "put student by Id"
  putPersonById(id: ID!, input: PersonInput!): Person
 "delete student by Id"
  deleteStudentById(id: ID!): String
  "delete all students"
  deleteAllStudents: String


  "Agrega una persona a un curso"
  addPeopleToCourse(courseID: ID!, personID: ID!): Course
}
